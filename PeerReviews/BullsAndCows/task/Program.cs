using System;
using task;

/* 
 * Внимание!
 * Чтобы улучшить структуру проекта, я разбил решение на отдельные блоки(файлы).
 * У каждого из которых есть своё назначние:
 * 
 * - Constants.cs содержит длиные строковые константы.
 *      Это нужно для того, чтобы большие строковые литералы не мешали оценивать основную часть программы.
 *      
 * - ReadInputs.cs содержит методы ввода и обработки значений, которые поступают от пользователя.
 *       При некорректных входных данных программа выводит сообщение об ошибки и запрашивает ввод заново.
 *       
 * - NumbersHandler.cs отвечает за корректную генерацию загаданного числа и подсчет количество "быков" и "коров".
 * 
 * - В Validates.cs реализованы методы обработки данных от пользователя, которые вызываются из ReadInputs.cs.
 * 
 * Для каждого метода из блоков я написал краткую документацию, чтобы понимать, что делает тот или иной метод.
 * Файл Program.cs содержить общую логику программы, т.е поэтапный её алгоритм.
 * 
*/

namespace task {
    partial class Program {

        /*
         * Метод Main включает в себя основной алгоритм работы программа:
         * 1. Пользователь вводит длину загаданного числа.
         * 2. Загаданное число генерируется.
         * 3. Пользователь пытается угадать, какое число загадал компьютер, путём ввода своих значений.
         * 4. Программа отвечает, сколько "быков" и "коров" находится в числе, которое ввёл пользователь.
         * Также в методе Main у меня получилось много больше 40 строк.
         * Иначе это сильно отразилось бы на оформлении самой игры.
         * Прошу сильно не ругать.
         */
        static void Main(string[] args) {

            // Вывод оформленного приветствия для игрока. Строка Greeting выводится жёлтым цветом.
            // После этого цвет символов консоли ставится по умолчанию белым.
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine(Greeting);
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.White;

            // Переменная GamesCount подсчитвает количество сыгранных игроком партий.
            int GamesCount = 0;

            // Цикл, запускающий повторное решение, если пользователь хочет продолжить игру.
            do {
                // Это условие символьно отделяет одну партию от другой, чтобы не путать игрока.
                // Для лучшей контрастности строка-разделитель выводится жёлтым цветом.
                if (GamesCount > 0) {
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine("+---------------------------------+\n");
                    Console.ForegroundColor = ConsoleColor.White;
                }

                // Программа запрашивает у пользователя длину введенного числа.
                // Длина числа хранится в переменной LengthOfNumber.
                // Проверка на корректность и повторный запрос решения реализован в методе ReadLength.
                Console.Write("Введи значение n(длину загаданного числа): ");
                int LengthOfNumber = ReadLength(Console.ReadLine());
                // Вывод пустой строки для оформления.
                Console.WriteLine();

                // Метод ThoughtsImitation имитирует генерацию загаданного числа.
                // Метод не имеет никакой другой функции, кроме красивого оформления.
                Console.Write("Загадываю число");
                ThoughtsImitation();
                // Вывод пустой строки для оформления.
                Console.WriteLine();

                // Строка HiddenNumber хранит загаданное компьютером число, которое сгенерировал метод GenerateHiddenNumber.
                // Я решил хранить это число именно в строке.
                // Так удобнее сравнивать загаданное число со значением, которое вводит пользователь.
                string HiddenNumber = GenerateHiddenNumber(LengthOfNumber);

                // Программа выводит сообщение, о том, что число загадано и игрок может начать его отгадывать.
                Console.WriteLine("Готово! Теперь попробуй отгадать.");
                Console.WriteLine();

                // Перменная TryCount хранит количество, которое понадобилось пользователю на отгадывание числа.
                // Переменная Bulls содержит количество "быков", которое находится в числе, которое ввёл пользователь.
                // Переменная Cows содержит количество "коров", которое находится в числе, которое ввёл пользователь.
                int TryCount = 0, Bulls = 0, Cows = 0;
                bool flag = false;

                // Цикл, в котором реализован процесс угадывания.
                // Цикл будет работать до тех пор, пока количество быков не станет равно длине загаданного числа.
                do {
                    // Вывод запроса числа от игрока.
                    // Строка PlayerNumber хранит значние, которое ввёл польватель.
                    // Проверка на корректность и повторный запрос решения реализован в методе ReadPlayerNumber.
                    Console.Write($"Введи /surrender, если хочешь сдаться,\nили {LengthOfNumber} - значное натуральное число без одинаковых цифр: ");
                    string PlayerNumber = ReadPlayerNumber(Console.ReadLine(), LengthOfNumber);

                    if (PlayerNumber == "flag") {
                        flag = true;
                        break;
                    }
                    // Методы BullsAmount и CowsAmount передают в переменные Bulls и Cows количество "быков" и "коров". 
                    Bulls = BullsAmount(HiddenNumber, PlayerNumber);
                    Cows = CowsAmount(HiddenNumber, PlayerNumber);

                    // Этот блок выводит оформенное сообщение о том, сколько "быков" и "коров" находится в числе игрока.
                    // Строки выводятся зелёным цветом, для понятного оформления.
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("+---------------------------------+");
                    Console.WriteLine($"|Количество быков в твоём числе: {Bulls}|");
                    Console.WriteLine($"|Количество коров в твоём числе: {Cows}|");
                    Console.WriteLine("+---------------------------------+");
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.WriteLine();

                    // Увелечение счётчика попыток.
                    TryCount++;
                } while (Bulls != LengthOfNumber);
                if (!flag) {
                    // После выхода из цикла игроку выводится строка-поздравления и количество попыток, которые ему потребовались.
                    // Сообщение выводится зелёным цветом.
                    Console.WriteLine();
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("Поздравляю, ты отдагадал число " + HiddenNumber);
                    Console.WriteLine($"Количество попыток - {TryCount}");
                    Console.ForegroundColor = ConsoleColor.White;
                }
                else {
                    Console.WriteLine($"К сожалению, ты не отгадал число {HiddenNumber}");
                }

                // Вывод инструкций для продолжения или завершения игры.
                // Чтобы завершить игру пользователь должен нажать клавишу ESCAPE.
                // Чтобы продолжить игру пользователь может нажать любую другую клавишу.
                // Но я решил намеренно попросить вводить именно ENTER, чтобы новый символ не переносился на слудующую строку/
                Console.WriteLine();
                Console.WriteLine("Если ты хочешь закончить игру - нажми клавишу ESCAPE.");
                Console.WriteLine("Если хочешь продолжить игру - нажми клавишу ENTER.");
                Console.WriteLine();

                // Увелечение счетчика партий.
                GamesCount++;
            } while (Console.ReadKey().Key != ConsoleKey.Escape);
             // Вывод благадарности и сообщения о том, что игра окончена.
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("Это была замечательная партия. Спасибо тебе!");

            // Чтобы закрыть программу пользователь должен нажать любую клавишу.
            Console.WriteLine("Чтобы программа закрылась, нажми любую клавишу.");
            Console.ReadKey();

        }
    }

}
